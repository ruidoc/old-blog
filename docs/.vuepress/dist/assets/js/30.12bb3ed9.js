(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{385:function(s,a,t){"use strict";t.r(a);var e=t(44),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"前端为什么要学-shell"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端为什么要学-shell"}},[s._v("#")]),s._v(" 前端为什么要学 shell?")]),s._v(" "),t("p",[s._v("Shell 是 操作 Linux 系统的桥梁。Shell 介绍看 "),t("RouterLink",{attrs:{to:"/around/shell/shell基础.html"}},[s._v("这里")]),s._v("。")],1),s._v(" "),t("p",[s._v("对于前端同学来说，几乎不需要和服务器打交道，为什么要学习 shell 呢？")]),s._v(" "),t("p",[s._v("其实从目前工程化的前端来看，至少有 3 个方面会用得到 shell。")]),s._v(" "),t("ol",[t("li",[s._v("webpack 编译配置")]),s._v(" "),t("li",[s._v("服务器部署配置")]),s._v(" "),t("li",[s._v("为服务器操作提供 GUI 界面")])]),s._v(" "),t("p",[s._v("下面一一细说这三个方面的用处。")]),s._v(" "),t("h3",{attrs:{id:"webpack-编译配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack-编译配置"}},[s._v("#")]),s._v(" webpack 编译配置")]),s._v(" "),t("p",[s._v("webpack 的打包命令 "),t("code",[s._v("npm run dev")]),s._v(" 就是在执行一个 shell 命令。")]),s._v(" "),t("p",[s._v("它会从 "),t("code",[s._v("package.json")]),s._v(" 文件里的 "),t("code",[s._v("script")]),s._v(" 字段下去寻找 "),t("code",[s._v("dev")]),s._v(" 这个 key，对应的值就是实际执行的 shell。比如这个例子：")]),s._v(" "),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"script"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"dev"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"webpack src/index.js dist/bundle.js"')]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("具体执行的 shell 就是：")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("webpack src/index.js dist/bundle.js\n")])])]),t("p",[s._v("基于这条命令，可以定制更多功能。比如说设置一个自定义环境变量：")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("APP_ENV")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("staging webpack src/index.js dist/bundle.js\n")])])]),t("p",[s._v("再复杂一些，每次打包生成不同名字的文件夹，名字是 "),t("code",[s._v("${timestring}_build")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("version")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("date")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"+%s"')]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("_build "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" webpack src/index.js dist/"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$version")]),s._v("/bundle.js\n")])])]),t("p",[s._v("除了直接写 shell，当然也可以执行一个脚本文件：")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("node scripts/start.js\n")])])]),t("p",[s._v("在 "),t("code",[s._v("scripts/start.js")]),s._v(" 这个脚本中自定义 webpack 编译流程。这是 create-react-app 的做法。")]),s._v(" "),t("h3",{attrs:{id:"服务器部署配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务器部署配置"}},[s._v("#")]),s._v(" 服务器部署配置")]),s._v(" "),t("p",[s._v("前端项目打包后要部署到服务器，整个部署流程几乎都要用到 shell。")]),s._v(" "),t("h4",{attrs:{id:"普通部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#普通部署"}},[s._v("#")]),s._v(" 普通部署")]),s._v(" "),t("p",[s._v("将打包后的文件上传到服务器，需要 rsync 命令：")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("rsync")]),s._v(" -avz ./dist/* root@yourip:/home/project_name\n")])])]),t("p",[s._v("上传服务器之后，有两种部署方式：")]),s._v(" "),t("ol",[t("li",[s._v("nginx 静态部署")]),s._v(" "),t("li",[s._v("nodejs + pm2 部署")])]),s._v(" "),t("p",[s._v("这两步都需要进入服务器操作，当然需要懂 shell 命令。")]),s._v(" "),t("h4",{attrs:{id:"自动部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自动部署"}},[s._v("#")]),s._v(" 自动部署")]),s._v(" "),t("p",[s._v("自动部署，也就是常说的 CI/CD，自动部署对 shell 的熟练度要求更高。")]),s._v(" "),t("p",[s._v("常用的 3 中部署方式：")]),s._v(" "),t("ol",[t("li",[s._v("Git 远程仓库")]),s._v(" "),t("li",[s._v("GitHub Action")]),s._v(" "),t("li",[s._v("Docker 镜像")])]),s._v(" "),t("p",[s._v("这 3 种方式对编写 shell 是基本要求，否则很难编写 .yml 配置和 Dockerfile。 所以说前端的自动部署和部署过程中的问题排查，要求前端同学必须懂 shell。")]),s._v(" "),t("h3",{attrs:{id:"为服务器操作提供-gui-界面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为服务器操作提供-gui-界面"}},[s._v("#")]),s._v(" 为服务器操作提供 GUI 界面")]),s._v(" "),t("p",[s._v("举个例子：vue-cli3 的图形化界面。")]),s._v(" "),t("p",[s._v("在这个界面上可以控制项目的创建，安装，启动，停止，删除等。结合本文开头的图，可以知道每个操作其实都是在执行一条 shell 命令。")]),s._v(" "),t("p",[s._v("当然了，大多数前端是调用接口操作数据，很少直接操作系统信息。但是一些提升效率的小工具，需要操作系统信息。")]),s._v(" "),t("p",[s._v("比如 宝塔 Linux 面板，比如阿里云。")]),s._v(" "),t("p",[s._v("学习 shell，是迈向高级前端的重要一步。")])])}),[],!1,null,null,null);a.default=r.exports}}]);