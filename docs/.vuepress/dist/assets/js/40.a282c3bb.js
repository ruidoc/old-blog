(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{396:function(v,_,t){"use strict";t.r(_);var s=t(44),r=Object(s.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"渲染引擎工作原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染引擎工作原理"}},[v._v("#")]),v._v(" 渲染引擎工作原理")]),v._v(" "),t("p",[v._v("上节介绍的渲染引擎的重要性，这一节深入剖析")]),v._v(" "),t("blockquote",[t("p",[v._v("这块知识非常容易出问答题/作为性能优化面试题的切入点")])]),v._v(" "),t("h3",{attrs:{id:"流程解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#流程解析"}},[v._v("#")]),v._v(" 流程解析")]),v._v(" "),t("p",[v._v("上节我们学到，渲染引擎可以把"),t("strong",[v._v("静态资源")]),v._v("转换为"),t("strong",[v._v("可视化界面")])]),v._v(" "),t("p",[t("img",{attrs:{src:"/assets/7E4E5DBA-657B-4F28-81BE-AF19F56EDCE8.png",alt:"7E4E5DBA-657B-4F28-81BE-AF19F56EDCE8"}})]),v._v(" "),t("p",[v._v("那么是如何转换呢？其实是有具体步骤的：")]),v._v(" "),t("p",[t("img",{attrs:{src:"/assets/BF9C8263-6C8F-4A3B-9A83-9A6599576B57.png",alt:"BF9C8263-6C8F-4A3B-9A83-9A6599576B57"}})]),v._v(" "),t("p",[v._v("整体来看，这五个过程分别完成了以下任务：")]),v._v(" "),t("p",[t("strong",[v._v("1. HTML 解析")])]),v._v(" "),t("p",[v._v("浏览器对 HTML 文档进行解析，并且请求需要的外部资源，如图片，css，js")]),v._v(" "),t("p",[t("strong",[v._v("2. CSS 解析")])]),v._v(" "),t("p",[v._v("浏览器将识别并加载所有的 CSS 样式信息。")]),v._v(" "),t("p",[t("strong",[v._v("3. 样式与结构合并")])]),v._v(" "),t("p",[v._v("将样式信息和文档结构合并，最终生成页面 render 树")]),v._v(" "),t("p",[v._v(":after :before 这样的伪元素会在这个环节被构建到 DOM 树中")]),v._v(" "),t("p",[t("strong",[v._v("4. 布局阶段")])]),v._v(" "),t("p",[v._v("页面中所有元素的相对位置信息，大小等信息均在这一步得到计算")]),v._v(" "),t("p",[v._v("比如：offsetLeft，offsetWidth")]),v._v(" "),t("p",[t("strong",[v._v("5. 页面绘制")])]),v._v(" "),t("p",[v._v("将前几步的处理结果转换为像素，进行文件解码")]),v._v(" "),t("h3",{attrs:{id:"阶段性产物"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#阶段性产物"}},[v._v("#")]),v._v(" 阶段性产物")]),v._v(" "),t("p",[t("strong",[v._v("1. DOM 树")])]),v._v(" "),t("p",[v._v("将 html 结构层层解析为最小单位 - 节点")]),v._v(" "),t("p",[t("img",{attrs:{src:"/assets/4193F4C7-DCF4-451B-9B43-C555AF8AA48F.jpg",alt:"4193F4C7-DCF4-451B-9B43-C555AF8AA48F"}})]),v._v(" "),t("p",[t("strong",[v._v("2. CSSOM 树")])]),v._v(" "),t("p",[v._v("将 css 解析成 CSSOM 树。没错，CSSOM 也是树形结构")]),v._v(" "),t("p",[v._v("注意的点：css 样式会从最通用规则开始匹配（比如全局修饰 P 标签，那么全部 p 标签都会应用），同时会从最顶层父元素开始继承样式，一层一层递归细化出具体样式。")]),v._v(" "),t("p",[t("img",{attrs:{src:"/assets/972496CB-88CE-4B66-8E5E-70E7E2DF5900.jpg",alt:"972496CB-88CE-4B66-8E5E-70E7E2DF5900"}})]),v._v(" "),t("p",[t("strong",[v._v("3. 渲染树")])]),v._v(" "),t("p",[v._v("DOM 树和 CSSOM 树解析完毕后，它们会立马合体，组成 Render Tree（渲染树）")]),v._v(" "),t("p",[v._v("渲染树只会渲染可见节点。步骤如下：")]),v._v(" "),t("ol",[t("li",[v._v("根节点开始遍历，筛选出所有可见的节点；")]),v._v(" "),t("li",[v._v("仅针对可见节点，为其匹配 CSSOM 中的 CSS 规则")]),v._v(" "),t("li",[v._v("发射可见节点（连同其内容和计算的样式）")])]),v._v(" "),t("p",[t("img",{attrs:{src:"/assets/A5EF4CB0-C04D-4C1B-A364-BB8B5005D2A6.jpg",alt:"A5EF4CB0-C04D-4C1B-A364-BB8B5005D2A6"}})]),v._v(" "),t("p",[t("strong",[v._v("4. 布局盒子模型")])]),v._v(" "),t("p",[v._v("上一步合成了渲染树，而这一步，我们需要遍历渲染树，计算出每个节点的具体大小和相对浏览器视口的具体位置")]),v._v(" "),t("p",[v._v("没错，这一步只是计算。计算后的信息写回渲染树，就形成了“布局渲染树”。")]),v._v(" "),t("p",[t("strong",[v._v("5. 目标界面")])]),v._v(" "),t("p",[v._v("上面的 4 步都是在内存中进行的，计算好了需要绘制界面的所有信息，可以说是万事俱备，只欠东风了。")]),v._v(" "),t("p",[v._v("这一步，就是把渲染树上的每一个节点绘制成像素，将页面呈现出来。")])])}),[],!1,null,null,null);_.default=r.exports}}]);