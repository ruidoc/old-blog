(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{427:function(t,s,a){"use strict";a.r(s);var n=a(44),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("p",[t._v("本节是 let 和 const 关键字相关的考点")]),t._v(" "),a("p",[t._v("考点，是它背后所牵扯出的变量提升、暂时性死区等知识点")]),t._v(" "),a("h3",{attrs:{id:"从变量提升说起"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从变量提升说起"}},[t._v("#")]),t._v(" 从变量提升说起")]),t._v(" "),a("p",[t._v("在 “var” 时代，有一个特别的现象：无论变量声明写在哪，最后都会被提到作用域的顶端。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这段代码不会报错，反而会输出一个 undefined，因为它等价于：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nnum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这是全局作用域的情况，函数作用域同理")]),t._v(" "),a("h3",{attrs:{id:"变量提升的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量提升的原理"}},[t._v("#")]),t._v(" 变量提升的原理")]),t._v(" "),a("p",[t._v("之前学过这方面相关的知识")]),t._v(" "),a("p",[t._v("js 分编译阶段和执行阶段，在代码执行前都会有个短暂的编译阶段，就在这个编译阶段完成了变量声明，所以变量才会提到作用域的顶端")]),t._v(" "),a("h3",{attrs:{id:"被禁用的变量提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#被禁用的变量提升"}},[t._v("#")]),t._v(" 被禁用的变量提升")]),t._v(" "),a("p",[t._v("而 let 和 const 的一个重要特征，就是它们"),a("strong",[t._v("不存在变量提升")])]),t._v(" "),a("p",[t._v("它们的声明生效时机和具体代码的执行时机保持一致")]),t._v(" "),a("h3",{attrs:{id:"let-与-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let-与-const"}},[t._v("#")]),t._v(" let 与 const")]),t._v(" "),a("p",[t._v("let 与 const 除了不存在变量提升，还和块作用域（局部作用域）有关")]),t._v(" "),a("h4",{attrs:{id:"let-关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let-关键字"}},[t._v("#")]),t._v(" let 关键字")]),t._v(" "),a("p",[t._v("let 声明变量时，会绑定到块作用域上，而 var 不会感知块作用域")]),t._v(" "),a("blockquote",[a("p",[t._v("在函数里，var 声明的变量也只在函数作用域中有效")])]),t._v(" "),a("h4",{attrs:{id:"const-关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#const-关键字"}},[t._v("#")]),t._v(" const 关键字")]),t._v(" "),a("p",[t._v("const 声明的变量，也会绑定到块作用域上")]),t._v(" "),a("p",[t._v("const 关键字还有两个特点：")]),t._v(" "),a("ul",[a("li",[t._v("声明时必须赋值")]),t._v(" "),a("li",[t._v("赋值后不可更改")])]),t._v(" "),a("p",[t._v("注意：赋值后不可更改得分情况。")]),t._v(" "),a("p",[t._v("如果值是基本类型，不可更改；\n如果是引用类型，比如对象，修改对象的属性是可以的，但是重新赋值对象是不允许的")]),t._v(" "),a("h3",{attrs:{id:"暂时性死区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#暂时性死区"}},[t._v("#")]),t._v(" 暂时性死区")]),t._v(" "),a("p",[t._v("在上文的基础上，理解暂时性死区")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" me "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xiuyan"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  me "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bear"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" me"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这段代码运行会报错，为什么呢？")]),t._v(" "),a("p",[t._v("块作用域中用 let 和 const 声明的变量，该变量会被封闭在块作用域中，不会“探出头去”寻找全局变量")]),t._v(" "),a("p",[t._v("同时，let 声明的变量不存在变量提升，所以会报错。")]),t._v(" "),a("p",[t._v("因此，在这个块作用域 let 关键字前，使用 let 变量的部分，就是暂时性死区。")]),t._v(" "),a("p",[t._v("暂时性死区的本质：当我们进入当前作用域时，let 或者 const 声明的变量已经存在了——它们只是不允许被获取而已")])])}),[],!1,null,null,null);s.default=e.exports}}]);