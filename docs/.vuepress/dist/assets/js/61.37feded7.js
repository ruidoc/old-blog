(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{414:function(t,s,a){"use strict";a.r(s);var n=a(44),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"响应式布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#响应式布局"}},[t._v("#")]),t._v(" 响应式布局")]),t._v(" "),a("p",[t._v("响应式布局，可以衍生出一个非常完整的移动端适配的知识链路。")]),t._v(" "),a("p",[t._v("两个重点概念：viewport 和 rem、em。")]),t._v(" "),a("h3",{attrs:{id:"_1-理解-viewport"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-理解-viewport"}},[t._v("#")]),t._v(" 1. 理解 viewport")]),t._v(" "),a("p",[t._v("viewport 也叫“视口”，通过 meta 标签来控制。")]),t._v(" "),a("p",[t._v("其实视口有3种，我们来介绍：")]),t._v(" "),a("h4",{attrs:{id:"布局视口-layout-viewport-与视觉视口-visual-viewport"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布局视口-layout-viewport-与视觉视口-visual-viewport"}},[t._v("#")]),t._v(" 布局视口（layout viewport）与视觉视口（visual viewport）")]),t._v(" "),a("p",[t._v("在移动端开发中，常见到这种 meta 标签写法。")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("viewport"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("width=device-width"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("为什么一定要设置 width=device-width？")]),t._v(" "),a("p",[t._v("假设把 width 改为 1000：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/46E76BDC-9469-4969-AA95-0335221FCE68.png",alt:"46E76BDC-9469-4969-AA95-0335221FCE68"}})]),t._v(" "),a("p",[t._v("就会出现这种情况：屏幕不能完全显示网页内容，会被截掉一部分。")]),t._v(" "),a("p",[a("strong",[t._v("这是由于视觉视口和布局视口不相等导致的")]),t._v("。")]),t._v(" "),a("p",[t._v("视觉视口，也就是可见的屏幕宽度，移动端是 320；而我们改的 1000，则是浏览器的布局视口。因为布局视口大于视觉视口，所以只能看到一部分。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/assets/CD2D7AFD-6CDD-42B5-A098-47DAAB175BE1.png",alt:"CD2D7AFD-6CDD-42B5-A098-47DAAB175BE1"}})]),t._v(" "),a("p",[t._v("视觉视口获取方法：")]),t._v(" "),a("p",[a("strong",[t._v("window.innerWidth")]),t._v(" 和 "),a("strong",[t._v("window.innerHeight")])]),t._v(" "),a("p",[t._v("布局视口宽度获取方法：")]),t._v(" "),a("p",[a("strong",[t._v("document.documentElement.clientWidth")])]),t._v(" "),a("h4",{attrs:{id:"理想视口-ideal-viewport"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理想视口-ideal-viewport"}},[t._v("#")]),t._v(" 理想视口（ideal viewport）")]),t._v(" "),a("p",[t._v("实际上，我们在做网页布局的时候，不能设置一个固定的宽度，来匹配所有的视觉视口。")]),t._v(" "),a("p",[t._v("这时候人们提出了“理想视口”，即理想情况下让布局视口自动的等于屏幕宽度。")]),t._v(" "),a("p",[t._v("怎么办？就是我们开始的那行代码：")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("viewport"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("width=device-width"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("这这是理想视口的设置方法。")]),t._v(" "),a("h3",{attrs:{id:"_2-理解-rem-和-em"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-理解-rem-和-em"}},[t._v("#")]),t._v(" 2. 理解 rem 和 em")]),t._v(" "),a("p",[t._v("rem 和 em 都是动态计算的尺寸。")]),t._v(" "),a("h4",{attrs:{id:"什么是-rem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-rem"}},[t._v("#")]),t._v(" 什么是 rem")]),t._v(" "),a("p",[t._v("rem 指的是相对于HTML根元素的字体大小（font-size）来计算的值。")]),t._v(" "),a("p",[t._v("比如：")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("html")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("font-size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 100px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("那么 "),a("strong",[t._v("1rem = 100px")]),t._v("；")]),t._v(" "),a("p",[t._v("此时假如我们给一个 div 设置这样的样式:")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 1rem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("height")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 2rem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("那么这个 div 的宽就是 100px，高就是 200px。")]),t._v(" "),a("h4",{attrs:{id:"什么是-em"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-em"}},[t._v("#")]),t._v(" 什么是 em")]),t._v(" "),a("p",[t._v("和 rem 一样的计算值。区别是 rem 是 html 的字体大小，em 是元素本身的字体大小。")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("font-size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 20px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("padding")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 10em"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 20em"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这个 div 的 padding 值为 200px，width 值为 400px。")]),t._v(" "),a("h5",{attrs:{id:"em-与继承相结合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#em-与继承相结合"}},[t._v("#")]),t._v(" em 与继承相结合")]),t._v(" "),a("p",[t._v("有些情况下，em 好像取的是父元素的字体大小。其实这是一个误区。")]),t._v(" "),a("p",[t._v("根本原因，是因为元素本身未设置字体大小，而继承了父元素的设置，所以看起来好像是 em 取了父元素的设置。")]),t._v(" "),a("p",[t._v("实际上，不管元素本身有没有显式地设置 font-size，"),a("strong",[t._v("em 取的都是当前元素的 font-size")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"_3-响应式布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-响应式布局"}},[t._v("#")]),t._v(" 3. 响应式布局")]),t._v(" "),a("p",[t._v("响应式布局的目的是为了让我们的页面能够在不同大小的设备屏幕上正常展示。")]),t._v(" "),a("p",[t._v("即不同宽度的屏幕可以展示出不同的内容。")]),t._v(" "),a("p",[t._v("三种常用方案：")]),t._v(" "),a("ul",[a("li",[t._v("媒体查询")]),t._v(" "),a("li",[t._v("rem")]),t._v(" "),a("li",[t._v("vw/vh")])]),t._v(" "),a("h4",{attrs:{id:"媒体查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#媒体查询"}},[t._v("#")]),t._v(" 媒体查询")]),t._v(" "),a("p",[t._v("既然要在不同宽度屏幕上展示不同内容，最直观的方法就是感知屏幕变化。媒体查询就是做这个的。")]),t._v(" "),a("p",[t._v("用法很简单，也很直观：")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token atrule"}},[a("span",{pre:!0,attrs:{class:"token rule"}},[t._v("@media")]),t._v(" screen "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("max-width")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 320px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 160px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token atrule"}},[a("span",{pre:!0,attrs:{class:"token rule"}},[t._v("@media")]),t._v(" screen "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("min-width")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 768px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 300px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("@media 是媒体查询属性的标识，“screen”指的是媒体类型。")]),t._v(" "),a("p",[t._v("括号里的宽度判断是重点：")]),t._v(" "),a("ul",[a("li",[t._v("max-width：实际宽度不大于此，应用该样式；")]),t._v(" "),a("li",[t._v("min-width：实际宽度不小于此，应用该样式；")])]),t._v(" "),a("h4",{attrs:{id:"rem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rem"}},[t._v("#")]),t._v(" rem")]),t._v(" "),a("p",[t._v("上一节我们已经知道，rem 是一个以根元素 font-size 大小为基准的相对单位。")]),t._v(" "),a("p",[t._v("那么如果页面中都使用了 rem，只要动态修改根元素的 font-size，就可以实现响应式布局。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("refreshRem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取文档对象(根元素）")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" docEl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" doc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("documentElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取视图容器宽度")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" docWidth "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" docEl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBoundingClientRect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("width"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// rem 取值为视图容器宽度的十分之一大小")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" rem "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" width "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置 rem 大小")]),t._v("\n    docEl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fontSize "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rem "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'px'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听浏览器窗口大小的变化")]),t._v("\nwindow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'resize'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" refreshRem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这段代码节选自一个非常经典的轮子 —— flexible.js，就是基于 rem 实现响应式布局。")]),t._v(" "),a("h4",{attrs:{id:"vw-vh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vw-vh"}},[t._v("#")]),t._v(" vw/vh")]),t._v(" "),a("p",[t._v("vw 和 vh 是一个动态尺寸单位。")]),t._v(" "),a("ul",[a("li",[t._v("vw：1vw = 视觉视口宽度 / 100；")]),t._v(" "),a("li",[t._v("vh：1vh = 视觉视口高度 / 100")])]),t._v(" "),a("p",[t._v("所以，"),a("strong",[t._v("1vw 是屏幕宽度的 1%；1vh 则是屏幕高度的 1%")]),t._v("；")]),t._v(" "),a("p",[t._v("vw/vh 一般用来给 div 设置宽高。")]),t._v(" "),a("h3",{attrs:{id:"高清方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高清方案"}},[t._v("#")]),t._v(" 高清方案")]),t._v(" "),a("p",[t._v("在移动端开发中，前端在接过设计稿实现页面的时候，会遇到这种情况：")]),t._v(" "),a("p",[t._v("设计稿的宽度是固定的 "),a("strong",[t._v("750px")]),t._v("，而我们手机屏幕宽度是不一样的，怎么适配呢？")]),t._v(" "),a("p",[t._v("这里有计算公式：")]),t._v(" "),a("p",[a("strong",[t._v("viewport-width = screen.width * dpr")])]),t._v(" "),a("blockquote",[a("p",[t._v("dpr：设备像素比。dpr = 物理像素 / css 像素")])])])}),[],!1,null,null,null);s.default=e.exports}}]);